import pandas as pd  
from sklearn.model_selection import train_test_split  
from sklearn.ensemble import RandomForestClassifier  
from sklearn.metrics import accuracy_score, classification_report  
from sklearn.preprocessing import LabelEncoder, StandardScaler  
from sklearn.naive_bayes import GaussianNB  
  
# 加载数据集  
column_names = [  
    "Age", "Workclass", "fnlwgt", "Education", "Education-Num", "Marital-Status",  
    "Occupation", "Relationship", "Race", "Sex", "Capital-Gain", "Capital-Loss",  
    "Hours-per-week", "Native-Country", "Income"  
]  
data = pd.read_csv(r"D:\电脑管家迁移文件\MobileFile\adult 2\adult.data", names=column_names, na_values=" ?", skipinitialspace=True)  
  
# 填充缺失值（简单起见，使用众数填充）  
data = data.fillna(data.mode().iloc[0])  
  
# 将分类特征转换为数值  
label_encoders = {}  
for column in ["Workclass", "Education", "Marital-Status", "Occupation", "Relationship", "Race", "Sex", "Native-Country", "Income"]:  
    le = LabelEncoder()  
    data[column] = le.fit_transform(data[column])  
    label_encoders[column] = le  
  
# 分离特征和目标变量  
X = data.drop("Income", axis=1)  
y = data["Income"]  
  
# 分割数据集为训练集和测试集  
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  
  
# 选出对收入影响较大的七个特征属性  
selected_features = ["Age", "Workclass", "Education", "Occupation", "Race", "Sex", "Native-Country"]  
X_train_selected = X_train[selected_features]  
X_test_selected = X_test[selected_features]  
  
# 使用随机森林分类器进行分类  
rf_clf = RandomForestClassifier(n_estimators=100, random_state=42)  # 可以调整参数  
rf_clf.fit(X_train_selected, y_train)  
y_pred_rf = rf_clf.predict(X_test_selected)  
  
# 打印结果  
print("Random Forest Classifier Results:")  
print("Accuracy:", accuracy_score(y_test, y_pred_rf))  
print(classification_report(y_test, y_pred_rf))  
  
# 对以上7个属性进行归一化处理，并使用朴素贝叶斯分类进行分类处理  
scaler = StandardScaler()  
X_train_selected_scaled = scaler.fit_transform(X_train_selected)  
X_test_selected_scaled = scaler.transform(X_test_selected)  
  
gnb_clf = GaussianNB()  
gnb_clf.fit(X_train_selected_scaled, y_train)  
y_pred_gnb = gnb_clf.predict(X_test_selected_scaled)  
  
# 打印结果  
print("Naive Bayes Classifier Results:")  
print("Accuracy:", accuracy_score(y_test, y_pred_gnb))  
print(classification_report(y_test, y_pred_gnb))
